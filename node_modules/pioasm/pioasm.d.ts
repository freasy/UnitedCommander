/**
 * PIO Output format:
 * - c-sdk: C header suitable for use with the Raspberry Pi Pico SDK
 * - python: Python file suitable for use with MicroPython
 * - hex: Raw hex output (only valid for single program inputs)
 * - ada: Ada specification
 *
 * @typedef {'c-sdk'|'python'|'hex'|'ada'} PioOutputFormat
 */
/**
 * PIO Assembler wrapper class
 */
export class PIOAssembler {
    /** @private */
    private exitCode;
    /** @private */
    private outputBuffer;
    /** @private */
    private instance;
    /**
     * Loads the pioasm Web Assembly module. Normally, `pioasm()` will load the module for
     * you, but you can use the `load()` method to pre-loader the Web Assembly module, or
     * if you need to provide custom options to EMScripten.
     *
     * For instance, you can override the `locateFile(url: string, scriptDirectory: string)`
     * method to configure the URL for the compiled web assembly module.
     *
     * @param {Partial<EmscriptenModule>} [options]
     * @returns {Promise<EmscriptenModule>}
     */
    load(options?: Partial<EmscriptenModule>): Promise<EmscriptenModule>;
    /**
     * Compiles the given PIO source file.
     *
     * @param {string} source PIO source to compile
     * @param {PioOutputFormat} [format='c-sdk'] Output format
     * @param {string} [outputParam] Add a parameter to be passed to the output format generator
     * @returns Promise<{output: string, exitCode: number}>
     */
    assemble(source: string, format?: PioOutputFormat, outputParam?: string): Promise<{
        output: string;
        exitCode: number;
    }>;
}
/**
 * PIO Output format:
 * - c-sdk: C header suitable for use with the Raspberry Pi Pico SDK
 * - python: Python file suitable for use with MicroPython
 * - hex: Raw hex output (only valid for single program inputs)
 * - ada: Ada specification
 */
export type PioOutputFormat = 'c-sdk' | 'python' | 'hex' | 'ada';
